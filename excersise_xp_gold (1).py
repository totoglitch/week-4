# -*- coding: utf-8 -*-
"""excersise xp gold

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17-2ijml96aZN5myZ-Hxl8TnbaPGW7Xkv

Exercise 1: Multivariate Normal Distribution
Task: Generate and visualize both a univariate and a multivariate normal distribution using SciPy. Explain their differences.

Hint for Univariate Distribution:

Use: norm from SciPy’s stats module.
Code Example:
from scipy.stats import norm
univariate_data = norm.rvs(size=1000)
Hint for Multivariate Distribution:
Use: multivariate_normal from the same module.
Code Example:
from scipy.stats import multivariate_normal
mean = [0, 0]
cov = [[1, 0], [0, 1]]  # diagonal covariance, independent variables
multivariate_data = multivariate_normal.rvs(mean=mean, cov=cov, size=1000)
Task Explanation: Compare the generated univariate and multivariate distributions. Discuss how the presence of multiple variables and their correlations in the multivariate case lead to differences in distribution shape and spread
"""

import numpy as np
import matplotlib.pyplot as plt
import numpy as np
import matplotlib.pyplot as plt
import scipy.stats as stats
from scipy.stats import norm, multivariate_normal
np.mean=[0,0]
np.cov=[[1,0],[0,1]]
multivariate_data = multivariate_normal.rvs(mean=np.mean, cov=np.cov, size=1000)
from scipy.stats import norm
Univariate_data = norm.rvs(size=1000)
plt.figure(figsize=(10, 6))
plt.subplot(1, 2, 1)
plt.hist(Univariate_data, bins=30, density=True, alpha=0.6, color='blue', label='Univariate')
plt.title('Univariate Distribution')
plt.xlabel('Value')
plt.ylabel('Density')
plt.legend()
plt.subplot(1, 2, 2)
plt.hist(multivariate_data[:, 0], bins=30, density=True, alpha=0.6, color='green', label='Multivariate')
plt

"""Exercise 2: Advanced Probability Distributions
Task: Choose an advanced probability distribution (e.g., Poisson, exponential) and demonstrate (in text, not code) its application in a real-world scenario.
Real-World Scenarios to Choose From:
Poisson Distribution: Use this to model the number of customer arrivals at a store in a given time interval.
Exponential Distribution: Exponential Distribution: Apply this to model the time until the next earthquake in an earthquake-prone region.
Explanation: Describe how the chosen distribution applies to the scenario, including the assumptions and implications of the distribution in the context.

"""



"""Exercise 3: Statistical Hypothesis Testing
Task: Perform and interpret an ANOVA test using SciPy to compare more than two groups.
Groups to Use: You can use the data provided from the following code:
import numpy as np
import pandas as pd

# Seed for reproducibility
np.random.seed(0)
# Sales data across different regions
region1 = np.random.normal(20000, 3000, 30)  # Region 1 sales
region2 = np.random.normal(22000, 3500, 30)  # Region 2 sales
region3 = np.random.normal(25000, 5000, 30)  # Region 3 sales
sales_data = pd.DataFrame({
    'Region 1': region1,
    'Region 2': region2,
    'Region 3': region3
})
Additional Resource: Here’s a link to a guide on ANOVA test. This will help you understand the test, as it has not been covered in your lessons yet.

"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import scipy.stats
np.random.seed(0)
region1=np.random.normal(20000,3000,30)
region2=np.random.normal(22000,3500,30)
region3=np.random.normal(25000,5000,30)
sales_data=pd.DataFrame({
    'Region 1':region1,
    'Region 2':region2,
    'Region 3':region3
})
f_statistic,p_value=scipy.stats.f_oneway(sales_data['Region 1'],sales_data['Region 2'],sales_data['Region 3'])
print(f"F-statistic: {f_statistic}")
print(f"P-value: {p_value}")
alpha=0.05
if p_value < alpha:
    print("Reject the null hypothesis. There is a statistically significant difference in sales means among the regions.")
else:
    print("Fail to reject the null hypothesis. There is no statistically significant difference in sales means among the regions.")

"""Exercise 4: Linear Regression Analysis
Task: Implement a simple linear regression analysis using SciPy on the provided dataset and interpret the results.
Dataset Generation Code:
import numpy as np
import pandas as pd
from scipy.stats import linregress

# Seed for reproducibility
np.random.seed(0)

# Sample data
X = np.random.rand(100) * 50  # Independent variable (e.g., hours studied)
Y = 2.5 * X + np.random.randn(100) * 10  # Dependent variable (e.g., test scores)

# Creating a DataFrame
linear_regression_data = pd.DataFrame({
  'Hours Studied': X,
  'Test Score': Y
})
Steps to Follow:
Data Preparation:
Dependent Variable (Y): ‘Test Score’
Independent Variable (X): ‘Hours Studied’
Performing Regression: Use the linregress function from SciPy’s stats module.
Interpretation: Focus on the slope, intercept, and R-squared values to understand the relationship between study hours and test scores.

"""

import numpy as np
import scipy.stats
from scipy.stats import linregress
import pandas as pd
import matplotlib.pyplot as plt
np.random.seed(0)
np.mean=[0,0]
np.cov=[[1,0],[0,1]]
from scipy.stats import multivariate_normal
multivariate_data = multivariate_normal.rvs(mean=np.mean, cov=np.cov, size=1000)
from scipy.stats import norm
Univariate_data = norm.rvs(size=1000)
plt.figure(figsize=(10, 6))
X=np.random.rand(100)*50
Y=2.5*X+np.random.randn(100)*10
linear_regression_data=pd.DataFrame({
    'Hours Studied':X,
    'Test Score':Y
})
x = linear_regression_data['Hours Studied']
y = linear_regression_data['Test Score']
slope, intercept, r_value, p_value, std_err = linregress(x, y)
print(f"Slope: {slope}")
print(f"Intercept: {intercept}")
print(f"R-squared: {r_value**2}")