# -*- coding: utf-8 -*-
"""exercises xp

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1egECyIXAmque1Q5lHydbzJw_QBLYtLqT

Exercises XP : 1: Instructions
In this exercise, you’ll work with a 3x3 matrix. Here’s a brief explanation of the concepts:

Determinant: The determinant is a value that can be computed from the elements of a square matrix. It provides important information about the matrix, such as whether it has an inverse, and is used in various areas like linear algebra and calculus. To understand more about it you can watch this video.
Inverse of a Matrix: The inverse of a matrix is a matrix that, when multiplied with the original matrix, results in an identity matrix. Not all matrices have inverses. The inverse is crucial in solving systems of linear equations.
Create a 3x3 matrix and perform the following operations:

Calculate the determinant.
Find the inverse of the matrix.
"""

import numpy as np

matrix = np.array([[1, 2, 3],
                  [4, 11, 6],
                  [7, 8, 9]])

determinant = np.linalg.det(matrix)
print("Determinant:", determinant)

try:
  inverse = np.linalg.inv(matrix)
  print("Inverse:\n", inverse)
except np.linalg.LinAlgError:
  print("The matrix is singular and does not have an inverse.")

"""ex 2 : Instructions
In this exercise, you’ll calculate statistical measures for a dataset:

Mean: The average value of a dataset.
Median: The middle value in a dataset when it is arranged in ascending or descending order.
Standard Deviation: A measure of the amount of variation or dispersion in a set of values.
Using NumPy, generate an array of 50 random numbers and compute:

The mean and median.
The standard deviation.

"""

import numpy as np

random_numbers = np.arange(0, 50)
np.random.shuffle(random_numbers)

mean = np.mean(random_numbers)
median = np.median(random_numbers)
std_dev = np.std(random_numbers)

print("Mean:", mean)
print("Median:", median)
print("Standard Deviation:", std_dev)

"""Exercise 3 : Date Manipulation
Instructions
Create a NumPy array of dates for the month of January 2023. Convert these dates to another format (e.g., YYYY/MM/DD).
"""

import numpy as np

# Create a NumPy array of dates for January 2023
dates = np.arange('2023-01-01', '2023-02-01', dtype='datetime64[D]')

# Convert the dates to the desired format (YYYY/MM/DD)
formatted_dates = np.datetime_as_string(dates, unit='D')

# Print the formatted dates
formatted_dates

"""Exercise 4 : Data Manipulation with NumPy and Pandas
Instructions
Create a DataFrame with random numbers and perform:

Conditional selection of data.
Aggregation functions like sum and average.

"""

import pandas as pd
import numpy as np

# Create a DataFrame with random numbers
data = {'col1': np.random.rand(10),
        'col2': np.random.rand(10),
        'col3': np.random.rand(10)}
df = pd.DataFrame(data)
selected_data = df[df['col1'] > 0.5]

# Calculate the sum of 'col2' for the selected data
sum_col2 = selected_data['col2'].sum()
print("Sum of 'col2' for selected data:", sum_col2)

# Calculate the average of 'col3' for the selected data
avg_col3 = selected_data['col3'].mean()
print("Average of 'col3' for selected data:", avg_col3)

# Example: Calculate the sum and average of 'col1' for the entire DataFrame
sum_col1 = df['col1'].sum()
avg_col1 = df['col1'].mean()
print("Sum of 'col1':", sum_col1)
print("Average of 'col1':", avg_col1)

"""ex 5: Instructions
Explain how images are represented in NumPy arrays and demonstrate with a simple example (e.g., creating a 5x5 grayscale image).


"""

import numpy as np
# Images are represented as multi-dimensional NumPy arrays.
# Grayscale images are 2D arrays where each element represents the pixel intensity.
# Color images are typically 3D arrays, with the third dimension representing the color channels (e.g., Red, Green, Blue).

# Example: Create a 5x5 grayscale image
grayscale_image = np.zeros((5, 5), dtype=np.uint8)  # Initialize a 5x5 array of zeros (black)
grayscale_image[1:4,1:4] = 128 # Set a middle square to gray
print(grayscale_image)

# Example: Create a simple color image
color_image = np.zeros((3, 3, 3), dtype=np.uint8)
color_image[0, 0] = [255, 0, 0]  # Red
color_image[1, 1] = [0, 255, 0]  # Green
color_image[2, 2] = [0, 0, 255]  # Blue
color_image

"""Exercise 6 : Basic Hypothesis Testing
Instructions
Create a sample dataset to test the effectiveness of a new training program on employee productivity:


import numpy as np

# Productivity scores of employees before the training program
productivity_before = np.random.normal(loc=50, scale=10, size=30)

# Productivity scores of the same employees after the training program
productivity_after = productivity_before + np.random.normal(loc=5, scale=3, size=30)

# Your task is to formulate a hypothesis regarding the training program's effectiveness
# and test it using basic statistical functions in NumPy.


Given a dataset, formulate a simple hypothesis and test it using basic statistical functions in NumPy.


"""

import numpy as np
productivity_before = np.random.normal(loc=50, scale=10, size=30)

productivity_after = productivity_before + np.random.normal(loc=5, scale=3, size=30)

# Hypothesis: The training program increases employee productivity.
# Calculate the mean productivity before and after
mean_before = np.mean(productivity_before)
mean_after = np.mean(productivity_after)

print(f"Mean productivity before training: {mean_before}")
print(f"Mean productivity after training: {mean_after}")

# Calculate the difference in means
difference = mean_after - mean_before

print(f"Difference in means: {difference}")

# Perform a t-test (requires scipy)
from scipy import stats
t_statistic, p_value = stats.ttest_rel(productivity_before, productivity_after)
print(f"T-statistic: {t_statistic}")
print(f"P-value: {p_value}")

# Conclusion:
alpha = 0.05
if p_value < alpha:
  print("Reject the null hypothesis. The training program significantly increased productivity.")
else:
  print("Fail to reject the null hypothesis. There's no significant evidence that the training program increased productivity.")

"""ex 7 :Instructions
Create two arrays and perform element-wise comparison to find which elements are greater in the first array.

The expected output is a boolean array showing which elements in the first array are greater than the corresponding elements in the second array.




"""

import numpy as np
array1 = np.array([1, 3, 5, 7, 9])
array2 = np.array([2, 1, 3, 7, 5])

comparison_result = array1 > array2
print (comparison_result)

"""Exercise 8 : Time Series Data Manipulation
Instructions
Generate time series data for the year 2023. Demonstrate slicing for the following intervals:

January to March
April to June
July to September
October to December
Generate a time series data for a specific period and demonstrate how to slice this data for different intervals.
"""

import numpy as np
import pandas as pd

date_rng = pd.date_range(start='1/1/2023', end='12/31/2023', freq='D')
df = pd.DataFrame(date_rng, columns=['date'])
df['data'] = np.random.randint(0, 365, size=(len(date_rng)))

# Slice the data for different intervals
january_to_march = df[(df['date'] >= '2023-01-01') & (df['date'] <= '2023-03-31')]
april_to_june = df[(df['date'] >= '2023-04-01') & (df['date'] <= '2023-06-30')]
july_to_september = df[(df['date'] >= '2023-07-01') & (df['date'] <= '2023-09-30')]
october_to_december = df[(df['date'] >= '2023-10-01') & (df['date'] <= '2023-12-31')]

print("January to March:\n", january_to_march)
print("\nApril to June:\n", april_to_june)
print("\nJuly to September:\n", july_to_september)
print("\nOctober to December:\n", october_to_december)

""" Exercise 9 : Data Conversion
Instructions
Demonstrate how to convert a NumPy array to a Pandas DataFrame and vice versa.


"""

import numpy as np
import pandas as pd
numpy_array = np.array([[1, 2, 3,12], [4, 5, 6,11], [7, 8, 9,15],[31,14,52,43]])
df = pd.DataFrame(numpy_array, columns=['A', 'B','c','d'])
print("DataFrame from NumPy array:\n", df)
numpy_array_from_df = df.to_numpy()
print("\nNumPy array from DataFrame:\n", numpy_array_from_df)

"""Exercise 10 : Basic Visualization
Instructions
Use Matplotlib to visualize a simple dataset created with NumPy (e.g., a line graph of random numbers).


"""

import matplotlib.pyplot as plt
import numpy as np
x = np.linspace(2, 10, 20)
y = np.sin(x)
plt.plot(x, y)

plt.title("Sine Wave")
plt.xlabel("X-axis")
plt.ylabel("Y-axis")
plt.grid(True)
plt.show()